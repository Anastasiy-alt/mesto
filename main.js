(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=e.baseUrl,this._headers=e.headers}var n,r;return n=t,(r=[{key:"_check",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"GET"}).then((function(t){return e._check(t)})).then((function(e){return e.forEach((function(e){var t={};t.title=e.name,t.link=e.link,initialCards.push(t)})),initialCards}))}},{key:"setInitialCards",value:function(){}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"GET"}).then((function(e){return e.json()})).then((function(t){return e._check(t)}))}},{key:"setUserInfo",value:function(e,t,n,r){var o=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e.name,about:e.info})}).then((function(e){return e.json()})).then((function(e){return o._check(e)})).then((function(e){t.textContent=e.name,n.textContent=e.about,r.src=e.avatar}))}},{key:"addCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return e.json()})).then((function(e){return t._check(e)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){var r=t.data,o=t.handleCardClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=r.title,this._link=r.link,this._cardSelector=n,this._handleCardClick=o}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._img=this._element.querySelector(".element__img"),this._imgName=this._element.querySelector(".element__name"),this._likeButton=this._element.querySelector(".element__like"),this._setEventListeners(),this._img.alt=this._title,this._img.src=this._link,this._imgName.textContent=this._title,fetch("https://mesto.nomoreparties.co/v1/cohort-46/cards",{method:"POST",headers:{authorization:"4ab555e1-39a0-48e6-8593-6e8a4a84e28f","Content-Type":"application/json"},body:JSON.stringify({name:this._title,link:this._link})}),this._element}},{key:"_handleClickLikeButton",value:function(){this._likeButton.classList.toggle("element__like_click")}},{key:"_handleClickDeleteButton",value:function(){this._element.remove()}},{key:"_setEventListeners",value:function(){var e=this;this._deleteButton=this._element.querySelector(".element__delete"),this._img.addEventListener("click",(function(){e._handleCardClick(e._title,e._link)})),this._deleteButton.addEventListener("click",(function(){e._handleClickDeleteButton()})),this._likeButton.addEventListener("click",(function(){e._handleClickLikeButton()}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._escClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._escClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._escClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._popup.addEventListener("mousedown",(function(t){t.target.classList.contains("popup_opened")&&e.close()}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=s(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},c.apply(this,arguments)}function s(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function f(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._submit=t,n._popupForm=n._popup.querySelector(".popup__form"),n._popupInput=n._popupForm.querySelectorAll(".popup__item"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return this._popupInput.forEach((function(t){e[t.name]=t.value})),e}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}},{key:"setEventListeners",value:function(){var e=this;c(p(a.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._submit(e._getInputValues())}))}},{key:"close",value:function(){c(p(a.prototype),"close",this).call(this),this._popupForm.reset()}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(i);function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=n}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(){return v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=b(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},v.apply(this,arguments)}function b(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}function k(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imgLink=t._popup.querySelector(".popup__img"),t._imgName=t._popup.querySelector(".popup__info-img"),t}return t=a,(n=[{key:"open",value:function(e,t){this._imgLink.src=t,this._imgLink.alt=e,this._imgName.textContent=e,v(w(a.prototype),"open",this).call(this)}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(i);function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){var n=t.userName,r=t.userInfo,o=t.userAvatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=n,this._userInfo=r,this._userAvatar=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e={};return e.name=this._userName.textContent,e.info=this._userInfo.textContent,e.avatar=this._userAvatar.src,e}},{key:"setUserInfo",value:function(e){this._userName.textContent=e.name,this._userInfo.textContent=e.info,this._userAvatar.src=e.avatar}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),j(this,"_showError",(function(e,t){var n=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(r._form.inputErrorClass),n.textContent=t,n.classList.add(r._form.errorClass)})),j(this,"_hideError",(function(e){var t=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(r._form.inputErrorClass),t.classList.remove(r._form.errorClass),t.textContent=" "})),j(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideError(e):r._showError(e,e.validationMessage)})),this._form=t,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(".popup__item")),this._buttonElement=this._formElement.querySelector(this._form.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListeners(),this._formElement.addEventListener("submit",(function(e){e.preventDefault()}))}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"makeButtonDisabled",value:function(){this._buttonElement.classList.add(this._form.inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"toggleButtonState",value:function(){this._hasInvalidInput()?this.makeButtonDisabled():(this._buttonElement.classList.remove(this._form.inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"resetValidation",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){e._hideError(t)}))}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),P=document.querySelector(".profile__edit-button"),I=document.querySelector(".popup_for_edit"),q=document.querySelector(".popup_for_add"),B=document.querySelector("[name=name]"),T=document.querySelector("[name=info]"),A=document.querySelector(".profile__name"),R=document.querySelector(".profile__info"),U=document.querySelector(".profile__add-button"),x=document.querySelector(".elements"),N=document.querySelector(".popup_for_img"),D=document.querySelector(".profile__avatar"),V={};function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J=new t({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-46",headers:{authorization:"4ab555e1-39a0-48e6-8593-6e8a4a84e28f","Content-Type":"application/json"}});Promise.all([J.getInitialCards(),J.getUserInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];i._id,z.setUserInfo(i),cardsList.renderItems(o)})).catch((function(e){console.log("Ошибка: ".concat(e))}));var z=new O({userName:A,userInfo:R,userAvatar:D}),G=new h(I,(function(e){J.setUserInfo(e,A,R,D).then((function(e){z.setUserInfo(e),G.close()})).catch((function(e){console.log("Ошибка: ".concat(e))}))}));G.setEventListeners(),P.addEventListener("click",(function(){V["form-info"].resetValidation();var e=z.getUserInfo();T.value=e.info,B.value=e.name,G.open()}));var M=new E(N);M.setEventListeners();var H=function(e){return new r({data:e,handleCardClick:function(e,t){M.open(e,t)}},".img-template").generateCard()},$=new h(q,(function(e){Q.addItem(H(e)),$.close()}));$.setEventListeners(),U.addEventListener("click",(function(){V["form-add"].resetValidation(),$.open()}));var K,Q=new d({renderer:function(e){Q.addItem(H(e))}},x);K={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_type_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},Array.from(document.querySelectorAll(K.formSelector)).forEach((function(e){var t=new L(K,e),n=e.getAttribute("name");V[n]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBaUIsMEJBQ2pCQyxXQUFZLDZCQ21IS00sTUFBTUMsS0FBS2pGLFNBQVNzQyxpQkFBaUJ3RixFQUFnQkMsZUFDN0Q1SixTQUFRLFNBQUM4SixHQUNoQixJQUFNQyxFQUFZLElBQUlsRSxFQUFjOEQsRUFBaUJHLEdBRS9DRSxFQUFXRixFQUFZRyxhQUFhLFFBRTFDOUIsRUFBZTZCLEdBQVlELEVBQzNCQSxFQUFVRyxrQkFDWCxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcbiAgICB9XG5cbiAgICBfY2hlY2socmVzKSB7XG4gICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIC8vINC10YHQu9C4INC+0YjQuNCx0LrQsCwg0L7RgtC60LvQvtC90Y/QtdC8INC/0YDQvtC80LjRgVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB0aGlzLl9jaGVjayhyZXMpKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRPYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZE9iai50aXRsZSA9IGl0ZW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY2FyZE9iai5saW5rID0gaXRlbS5saW5rO1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ2FyZHMucHVzaChjYXJkT2JqKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsQ2FyZHM7XG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIHNldEluaXRpYWxDYXJkcygpIHtcblxuICAgIH1cblxuICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihyZXMgPT4gdGhpcy5fY2hlY2socmVzKSlcbiAgICB9XG5cbiAgICBzZXRVc2VySW5mbyh1c2VyRGF0YSwgcHJOYW1lLCBwckluZm8sIHByTGluaykge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHVzZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgYWJvdXQ6IHVzZXJEYXRhLmluZm9cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB0aGlzLl9jaGVjayhyZXMpKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHByTmFtZS50ZXh0Q29udGVudCA9IHJlc3VsdC5uYW1lO1xuICAgICAgICAgICAgICAgIHBySW5mby50ZXh0Q29udGVudCA9IHJlc3VsdC5hYm91dDtcbiAgICAgICAgICAgICAgICBwckxpbmsuc3JjID0gcmVzdWx0LmF2YXRhcjtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgYWRkQ2FyZChjYXJkRGF0YSkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbmFtZTogY2FyZERhdGEubmFtZSxcbiAgICAgICAgICAgICAgICBsaW5rOiBjYXJkRGF0YS5saW5rXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihyZXMgPT4gdGhpcy5fY2hlY2socmVzKSk7XG4gICAgfVxuXG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3Rvcih7IGRhdGEsIGhhbmRsZUNhcmRDbGljayB9LCBjYXJkU2VsZWN0b3IpIHtcbiAgICB0aGlzLl90aXRsZSA9IGRhdGEudGl0bGU7XG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcbiAgICAgIC5jb250ZW50XG4gICAgICAucXVlcnlTZWxlY3RvcignLmVsZW1lbnQnKVxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcblxuICAgIHJldHVybiBjYXJkRWxlbWVudDtcbiAgfVxuXG4gIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcbiAgICB0aGlzLl9pbWcgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWcnKTtcbiAgICB0aGlzLl9pbWdOYW1lID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fbmFtZScpO1xuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19saWtlJyk7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9pbWcuYWx0ID0gdGhpcy5fdGl0bGU7XG4gICAgdGhpcy5faW1nLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgdGhpcy5faW1nTmFtZS50ZXh0Q29udGVudCA9IHRoaXMuX3RpdGxlO1xuICAgIGZldGNoKCdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQ2L2NhcmRzJywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogJzRhYjU1NWUxLTM5YTAtNDhlNi04NTkzLTZlOGE0YTg0ZTI4ZicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLl90aXRsZSxcbiAgICAgICAgICAgICAgICBsaW5rOiB0aGlzLl9saW5rXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIF9oYW5kbGVDbGlja0xpa2VCdXR0b24oKSB7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdlbGVtZW50X19saWtlX2NsaWNrJyk7XG4gIH1cblxuICBfaGFuZGxlQ2xpY2tEZWxldGVCdXR0b24oKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19kZWxldGUnKTtcbiAgICB0aGlzLl9pbWcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fdGl0bGUsIHRoaXMuX2xpbmspXG4gICAgfSk7XG4gICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlQ2xpY2tEZWxldGVCdXR0b24oKTtcbiAgICB9KTtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlQ2xpY2tMaWtlQnV0dG9uKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cCkge1xuICAgICAgICB0aGlzLl9wb3B1cCA9IHBvcHVwO1xuICAgICAgICB0aGlzLl9lc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgb3BlbigpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCgncG9wdXBfb3BlbmVkJyk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9lc2NDbG9zZSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fZXNjQ2xvc2UpO1xuICAgIH1cblxuICAgIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgY29uc3QgY2xvc2VCdG4gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJyk7XG4gICAgICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9vcGVuZWQnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBzdWJtaXQpIHtcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3N1Ym1pdCA9IHN1Ym1pdDtcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XG4gICAgICAgIHRoaXMuX3BvcHVwSW5wdXQgPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19pdGVtJyk7XG4gICAgfVxuXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xuICAgICAgICBjb25zdCBpbnB1dERhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5fcG9wdXBJbnB1dC5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlucHV0RGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGlucHV0RGF0YTtcbiAgICB9XG5cblxuICBzZXRJbnB1dFZhbHVlcyhkYXRhKSB7XG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgIC8vINGC0YPRgiDQstGB0YLQsNCy0LvRj9C10Lwg0LIgYHZhbHVlYCDQuNC90L/Rg9GC0LAg0LTQsNC90L3Ri9C1INC40Lcg0L7QsdGK0LXQutGC0LAg0L/QviDQsNGC0YDQuNCx0YPRgtGDIGBuYW1lYCDRjdGC0L7Qs9C+INC40L3Qv9GD0YLQsFxuICAgICAgaW5wdXQudmFsdWUgPSBkYXRhW2lucHV0Lm5hbWVdO1xuICAgIH0pO1xuICB9XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZXNldCgpO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7cmVuZGVyZXIgfSwgY29udGFpbmVyKSB7XG4gICAgICAgIC8vIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBhZGRJdGVtKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVuZGVySXRlbXMoaXRlbXMpIHtcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2ltZ0xpbmsgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltZycpO1xuICAgICAgICB0aGlzLl9pbWdOYW1lID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbmZvLWltZycpO1xuICAgIH1cblxuICAgIG9wZW4obmFtZSwgbGluaykge1xuICAgICAgICB0aGlzLl9pbWdMaW5rLnNyYyA9IGxpbms7XG4gICAgICAgIHRoaXMuX2ltZ0xpbmsuYWx0ID0gbmFtZTtcbiAgICAgICAgdGhpcy5faW1nTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgICAgIHN1cGVyLm9wZW4oKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICAgIGNvbnN0cnVjdG9yKHsgdXNlck5hbWUsIHVzZXJJbmZvLCB1c2VyQXZhdGFyIH0pIHtcbiAgICAgICAgdGhpcy5fdXNlck5hbWUgPSB1c2VyTmFtZTtcbiAgICAgICAgdGhpcy5fdXNlckluZm8gPSB1c2VySW5mbztcbiAgICAgICAgdGhpcy5fdXNlckF2YXRhciA9IHVzZXJBdmF0YXI7XG4gICAgfVxuXG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0ge307XG4gICAgICAgIHVzZXJEYXRhWyduYW1lJ10gPSB0aGlzLl91c2VyTmFtZS50ZXh0Q29udGVudDtcbiAgICAgICAgdXNlckRhdGFbJ2luZm8nXSA9IHRoaXMuX3VzZXJJbmZvLnRleHRDb250ZW50O1xuICAgICAgICB1c2VyRGF0YVsnYXZhdGFyJ10gPSB0aGlzLl91c2VyQXZhdGFyLnNyYztcbiAgICAgICAgcmV0dXJuIHVzZXJEYXRhO1xuXG4gICAgfVxuXG4gICAgc2V0VXNlckluZm8odXNlckRhdGEpIHtcbiAgICAgICAgdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQgPSB1c2VyRGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl91c2VySW5mby50ZXh0Q29udGVudCA9IHVzZXJEYXRhLmluZm87XG4gICAgICAgIHRoaXMuX3VzZXJBdmF0YXIuc3JjID0gdXNlckRhdGEuYXZhdGFyO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihmb3JtQ2xhc3NMaXN0LCBmb3JtKSB7XG4gICAgICAgIHRoaXMuX2Zvcm0gPSBmb3JtQ2xhc3NMaXN0O1xuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm07XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19pdGVtJykpO1xuICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9mb3JtLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcbiAgICB9O1xuXG4gICAgLy8g0KTRg9C90LrRhtC40Y8sINC60L7RgtC+0YDQsNGPINC00L7QsdCw0LLQu9GP0LXRgiDQutC70LDRgdGBINGBINC+0YjQuNCx0LrQvtC5XG4gICAgX3Nob3dFcnJvciA9IChpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Zvcm0uaW5wdXRFcnJvckNsYXNzKTtcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9mb3JtLmVycm9yQ2xhc3MpO1xuICAgIH07XG5cbiAgICAvLyDQpNGD0L3QutGG0LjRjywg0LrQvtGC0L7RgNCw0Y8g0YPQtNCw0LvRj9C10YIg0LrQu9Cw0YHRgSDRgSDQvtGI0LjQsdC60L7QuVxuICAgIF9oaWRlRXJyb3IgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcbiAgICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZm9ybS5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9mb3JtLmVycm9yQ2xhc3MpO1xuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIiBcIjtcbiAgICB9O1xuXG4gICAgLy8g0KTRg9C90LrRhtC40Y8sINC60L7RgtC+0YDQsNGPINC/0YDQvtCy0LXRgNGP0LXRgiDQstCw0LvQuNC00L3QvtGB0YLRjCDQv9C+0LvRj1xuICAgIF9jaGVja0lucHV0VmFsaWRpdHkgPSAoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9zaG93RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faGlkZUVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KVxuICAgIH07XG5cbiAgICBfaGFzSW52YWxpZElucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvL9GE0YPQvdC60YbQuNGPLCDQutC+0YLQvtGA0LDRjyDQtNC10LvQsNC10YIg0LrQvdC+0L/QutGDINC90LXQsNC60YLQuNCy0L3QvtC5IFxuICAgIG1ha2VCdXR0b25EaXNhYmxlZCgpIHtcbiAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Zvcm0uaW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlXG4gICAgfTtcblxuICAgIHRvZ2dsZUJ1dHRvblN0YXRlKCkge1xuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFrZUJ1dHRvbkRpc2FibGVkKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9mb3JtLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlRXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59IiwiZXhwb3J0IGNvbnN0IGVkaXRCdG5Qcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XG5leHBvcnQgY29uc3QgcG9wdXBFZGl0UHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9mb3JfZWRpdCcpO1xuZXhwb3J0IGNvbnN0IHBvcHVwQWRkQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9mb3JfYWRkJyk7XG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW25hbWU9bmFtZV0nKTtcbmV4cG9ydCBjb25zdCBpbmZvSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT1pbmZvXScpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX25hbWUnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19pbmZvJyk7XG5leHBvcnQgY29uc3QgYWRkQnRuSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xuZXhwb3J0IGNvbnN0IGJsb2NrQ2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHMnKTtcbmV4cG9ydCBjb25zdCBpbWFnZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX2Zvcl9pbWcnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2F2YXRhcicpO1xuXG5leHBvcnQgY29uc3QgcG9wdXBWYWxpZGF0aW9uID0ge1xuICBmb3JtU2VsZWN0b3I6ICcucG9wdXBfX2Zvcm0nLFxuICBpbnB1dFNlbGVjdG9yOiAnLnBvcHVwX19pbnB1dCcsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiAnLnBvcHVwX19idXR0b24nLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAncG9wdXBfX2J1dHRvbl90eXBlX2Rpc2FibGVkJyxcbiAgaW5wdXRFcnJvckNsYXNzOiAncG9wdXBfX2lucHV0X3R5cGVfZXJyb3InLFxuICBlcnJvckNsYXNzOiAncG9wdXBfX2lucHV0LWVycm9yX2FjdGl2ZSdcbn07XG5leHBvcnQgY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTsiLCJpbXBvcnQgQXBpIGZyb20gJy4uL2NvbXBvbmVudHMvQXBpLmpzJztcbmltcG9ydCBDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMnO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBVc2VySW5mbyBmcm9tICcuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuaW1wb3J0IHsgaW5pdGlhbCB9IGZyb20gXCIuLi91dGlscy9jYXJkcy5qc1wiO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcbmltcG9ydCB7XG4gIGVkaXRCdG5Qcm9maWxlLCBwb3B1cEVkaXRQcm9maWxlLCBwb3B1cEFkZENhcmQsIG5hbWVJbnB1dCxcbiAgaW5mb0lucHV0LCBwcm9maWxlTmFtZSwgcHJvZmlsZUluZm8sIGFkZEJ0bkltYWdlLFxuICBibG9ja0NhcmRzLCBpbWFnZVBvcHVwLCBwb3B1cFZhbGlkYXRpb24sXG4gIGZvcm1WYWxpZGF0b3JzLCBwcm9maWxlQXZhdGFyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcblxuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gIGJhc2VVcmw6ICdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQ2JyxcbiAgaGVhZGVyczoge1xuICAgIGF1dGhvcml6YXRpb246ICc0YWI1NTVlMS0zOWEwLTQ4ZTYtODU5My02ZThhNGE4NGUyOGYnLFxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfVxufSk7XG5cbmxldCB1c2VySWQ7XG5cblByb21pc2UuYWxsKFthcGkuZ2V0SW5pdGlhbENhcmRzKCksIGFwaS5nZXRVc2VySW5mbygpXSlcbiAgLnRoZW4oKFtpbml0aWFsQ2FyZHMsIHVzZXJEYXRhXSkgPT4ge1xuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YSk7XG4gICAgY2FyZHNMaXN0LnJlbmRlckl0ZW1zKGluaXRpYWxDYXJkcyk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJ9YCk7XG4gIH0pO1xuXG4vLyBmZXRjaCgnaHR0cHM6Ly9ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC00Ni91c2Vycy9tZScsIHtcbi8vICAgaGVhZGVyczoge1xuLy8gICAgIGF1dGhvcml6YXRpb246ICc0YWI1NTVlMS0zOWEwLTQ4ZTYtODU5My02ZThhNGE4NGUyOGYnXG4vLyAgIH1cbi8vIH0pXG4vLyAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuLy8gICAudGhlbigocmVzdWx0KSA9PiB7XG4vLyAgICAgcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSByZXN1bHQubmFtZTtcbi8vICAgICBwcm9maWxlSW5mby50ZXh0Q29udGVudCA9IHJlc3VsdC5hYm91dDtcbi8vICAgICBwcm9maWxlQXZhdGFyLnNyYyA9IHJlc3VsdC5hdmF0YXI7XG4vLyAgIH0pO1xuXG4vLyBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXTsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBmZXRjaCgnaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC00Ni9jYXJkcycsIHtcbi8vICAgaGVhZGVyczoge1xuLy8gICAgIGF1dGhvcml6YXRpb246ICc0YWI1NTVlMS0zOWEwLTQ4ZTYtODU5My02ZThhNGE4NGUyOGYnXG4vLyAgIH1cbi8vIH0pXG4vLyAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuLy8gICAudGhlbigocmVzdWx0KSA9PiB7XG4vLyAgICAgcmVzdWx0LmZvckVhY2ggKGZ1bmN0aW9uIChpdGVtKSB7XG4vLyAgICAgICBjb25zdCBjYXJkT2JqID0ge307XG4vLyAgICAgICBjYXJkT2JqLnRpdGxlID0gaXRlbS5uYW1lO1xuLy8gICAgICAgY2FyZE9iai5saW5rID0gaXRlbS5saW5rO1xuLy8gICAgICAgaW5pdGlhbENhcmRzLnB1c2goY2FyZE9iaik7XG4vLyAgICAgfSlcbi8vICAgICByZXR1cm4gaW5pdGlhbENhcmRzO1xuLy8gICB9KVxuLy8gICBjb25zb2xlLmxvZyhpbml0aWFsKTtcbi8vIGNvbnNvbGUubG9nKGluaXRpYWxDYXJkcyk7XG5cbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcbiAgdXNlck5hbWU6IHByb2ZpbGVOYW1lLFxuICB1c2VySW5mbzogcHJvZmlsZUluZm8sXG4gIHVzZXJBdmF0YXI6IHByb2ZpbGVBdmF0YXJcbn0pO1xuXG5jb25zdCBzdWJtaXRFZGl0ID0gKGRhdGFFZGl0Rm9ybSkgPT4ge1xuICBhcGkuc2V0VXNlckluZm8oZGF0YUVkaXRGb3JtLCBwcm9maWxlTmFtZSwgcHJvZmlsZUluZm8sIHByb2ZpbGVBdmF0YXIpXG4gIC50aGVuKChkYXRhRWRpdEZvcm0pID0+IHtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhkYXRhRWRpdEZvcm0pO1xuICAgIGhhbmRsZUVkaXRGb3JtLmNsb3NlKCk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJ9YCk7XG4gIH0pXG59XG5cbmNvbnN0IGhhbmRsZUVkaXRGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBFZGl0UHJvZmlsZSwgc3VibWl0RWRpdCk7XG5oYW5kbGVFZGl0Rm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xuXG5lZGl0QnRuUHJvZmlsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZm9ybVZhbGlkYXRvcnNbJ2Zvcm0taW5mbyddLnJlc2V0VmFsaWRhdGlvbigpO1xuICBjb25zdCB1c2VyRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKClcbiAgaW5mb0lucHV0LnZhbHVlID0gdXNlckRhdGEuaW5mbztcbiAgbmFtZUlucHV0LnZhbHVlID0gdXNlckRhdGEubmFtZTtcbiAgaGFuZGxlRWRpdEZvcm0ub3BlbigpO1xufSk7XG5cbmNvbnN0IHpvb21JbWcgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoaW1hZ2VQb3B1cCk7XG56b29tSW1nLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmNvbnN0IGNyZWF0ZUNhcmQgPSAoZGF0YSkgPT4ge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGhhbmRsZUNhcmRDbGljazogKG5hbWUsIGxpbmspID0+IHtcbiAgICAgICAgem9vbUltZy5vcGVuKG5hbWUsIGxpbmspO1xuICAgICAgfVxuICAgIH0sICcuaW1nLXRlbXBsYXRlJyk7XG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcbiAgcmV0dXJuIGNhcmRFbGVtZW50O1xufTtcblxuY29uc3Qgc3VibWl0QWRkID0gKGRhdGFBZGRGb3JtKSA9PiB7XG4gINGBYXJkc0xpc3QuYWRkSXRlbShjcmVhdGVDYXJkKGRhdGFBZGRGb3JtKSk7XG4gIGhhbmRsZUFkZENhcmRQb3B1cC5jbG9zZSgpO1xufTtcblxuY29uc3QgaGFuZGxlQWRkQ2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBBZGRDYXJkLCBzdWJtaXRBZGQpO1xuaGFuZGxlQWRkQ2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbmFkZEJ0bkltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBmb3JtVmFsaWRhdG9yc1snZm9ybS1hZGQnXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgaGFuZGxlQWRkQ2FyZFBvcHVwLm9wZW4oKTtcbn0pXG5cbmNvbnN0INGBYXJkc0xpc3QgPSBuZXcgU2VjdGlvbih7XG4gIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xuICAgINGBYXJkc0xpc3QuYWRkSXRlbShjcmVhdGVDYXJkKGl0ZW0pKTtcbiAgfVxufSwgYmxvY2tDYXJkcyk7XG5cbi8v0YFhcmRzTGlzdC5yZW5kZXJJdGVtcyhpbml0aWFsKTsgLy8vLy8vLy8vLy8vLy9cblxuLy8g0JLQutC70Y7Rh9C10L3QuNC1INCy0LDQu9C40LTQsNGG0LjQuFxuY29uc3QgZW5hYmxlVmFsaWRhdGlvbiA9IChwb3B1cFZhbGlkYXRpb24pID0+IHtcbiAgY29uc3QgZm9ybUxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocG9wdXBWYWxpZGF0aW9uLmZvcm1TZWxlY3RvcikpXG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IocG9wdXBWYWxpZGF0aW9uLCBmb3JtRWxlbWVudClcbiAgICAvLyDQv9C+0LvRg9GH0LDQtdC8INC00LDQvdC90YvQtSDQuNC3INCw0YLRgNC40LHRg9GC0LAgYG5hbWVgINGDINGE0L7RgNC80YtcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZSgnbmFtZScpXG4gICAgLy8g0LLQvtGCINGC0YPRgiDQsiDQvtCx0YrQtdC60YIg0LfQsNC/0LjRgdGL0LLQsNC10Lwg0L/QvtC0INC40LzQtdC90LXQvCDRhNC+0YDQvNGLXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xuICAgIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIH0pO1xufTtcblxuZW5hYmxlVmFsaWRhdGlvbihwb3B1cFZhbGlkYXRpb24pO1xuIl0sIm5hbWVzIjpbIkFwaSIsIm9wdGlvbnMiLCJ0aGlzIiwiX2Jhc2VVcmwiLCJiYXNlVXJsIiwiX2hlYWRlcnMiLCJoZWFkZXJzIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImZldGNoIiwibWV0aG9kIiwidGhlbiIsIl9jaGVjayIsInJlc3VsdCIsImZvckVhY2giLCJpdGVtIiwiY2FyZE9iaiIsInRpdGxlIiwibmFtZSIsImxpbmsiLCJpbml0aWFsQ2FyZHMiLCJwdXNoIiwidXNlckRhdGEiLCJwck5hbWUiLCJwckluZm8iLCJwckxpbmsiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiaW5mbyIsInRleHRDb250ZW50Iiwic3JjIiwiYXZhdGFyIiwiY2FyZERhdGEiLCJDYXJkIiwiY2FyZFNlbGVjdG9yIiwiZGF0YSIsImhhbmRsZUNhcmRDbGljayIsIl90aXRsZSIsIl9saW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfaW1nIiwiX2ltZ05hbWUiLCJfbGlrZUJ1dHRvbiIsIl9zZXRFdmVudExpc3RlbmVycyIsImFsdCIsImF1dGhvcml6YXRpb24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJfZGVsZXRlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVDbGlja0RlbGV0ZUJ1dHRvbiIsIl9oYW5kbGVDbGlja0xpa2VCdXR0b24iLCJQb3B1cCIsInBvcHVwIiwiX3BvcHVwIiwiX2VzY0Nsb3NlIiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsImFkZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJjbG9zZSIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsInBvcHVwU2VsZWN0b3IiLCJzdWJtaXQiLCJfc3VibWl0IiwiX3BvcHVwRm9ybSIsIl9wb3B1cElucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0RGF0YSIsImlucHV0IiwidmFsdWUiLCJfaW5wdXRMaXN0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc2V0IiwiU2VjdGlvbiIsImNvbnRhaW5lciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImVsZW1lbnQiLCJwcmVwZW5kIiwiaXRlbXMiLCJQb3B1cFdpdGhJbWFnZSIsIl9pbWdMaW5rIiwiVXNlckluZm8iLCJ1c2VyTmFtZSIsInVzZXJJbmZvIiwidXNlckF2YXRhciIsIl91c2VyTmFtZSIsIl91c2VySW5mbyIsIl91c2VyQXZhdGFyIiwiRm9ybVZhbGlkYXRvciIsImZvcm1DbGFzc0xpc3QiLCJmb3JtIiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiX2Zvcm1FbGVtZW50IiwiaWQiLCJfZm9ybSIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hpZGVFcnJvciIsIl9zaG93RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIkFycmF5IiwiZnJvbSIsIl9idXR0b25FbGVtZW50Iiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJzb21lIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImRpc2FibGVkIiwiX2hhc0ludmFsaWRJbnB1dCIsIm1ha2VCdXR0b25EaXNhYmxlZCIsImVkaXRCdG5Qcm9maWxlIiwicG9wdXBFZGl0UHJvZmlsZSIsInBvcHVwQWRkQ2FyZCIsIm5hbWVJbnB1dCIsImluZm9JbnB1dCIsInByb2ZpbGVOYW1lIiwicHJvZmlsZUluZm8iLCJhZGRCdG5JbWFnZSIsImJsb2NrQ2FyZHMiLCJpbWFnZVBvcHVwIiwicHJvZmlsZUF2YXRhciIsImZvcm1WYWxpZGF0b3JzIiwiYXBpIiwiYWxsIiwiZ2V0SW5pdGlhbENhcmRzIiwiZ2V0VXNlckluZm8iLCJfaWQiLCJzZXRVc2VySW5mbyIsImNhcmRzTGlzdCIsInJlbmRlckl0ZW1zIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiaGFuZGxlRWRpdEZvcm0iLCJkYXRhRWRpdEZvcm0iLCJzZXRFdmVudExpc3RlbmVycyIsIm9wZW4iLCJ6b29tSW1nIiwiY3JlYXRlQ2FyZCIsImdlbmVyYXRlQ2FyZCIsImhhbmRsZUFkZENhcmRQb3B1cCIsImRhdGFBZGRGb3JtIiwi0YFhcmRzTGlzdCIsImFkZEl0ZW0iLCJwb3B1cFZhbGlkYXRpb24iLCJmb3JtU2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiZm9ybUVsZW1lbnQiLCJ2YWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImVuYWJsZVZhbGlkYXRpb24iXSwic291cmNlUm9vdCI6IiJ9